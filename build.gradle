// http://lenskit.org/documentation/evaluator/upgrading/

/* This file may be freely modified, used, and redistributed without restriction. */
/* Set up the repositories to get the LensKit plugin.
 * This configuration pulls in things needed for the build.gradle script itself */
buildscript {
    repositories {
        // allow maven local to be turned on
        if ((project.findProperty('maven.useLocal') ?: 'no') == 'yes') {
            mavenLocal()
        }
        // LensKit snapshots are published to the Sonatype snapshot repository
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        // LensKit releases are published to Maven Central
        mavenCentral()
    }
    dependencies {
        classpath "org.lenskit:lenskit-gradle:${project.findProperty('lenskit.version') ?: '3.0-M2'}"
    }
}

apply plugin: 'java' // if you use Groovy or Scala, add those plugins
apply plugin: 'lenskit'

// PREVIOUS BUILD LEFTOVERS-------------------
apply plugin: 'application'

// warning: [options] bootstrap class path not set in conjunction with -source 1.7
sourceCompatibility = '1.7' 

mainClassName = 'org.grouplens.lenskit.hello.HelloLenskit'
// END OF PREVIOUS BUILD LEFTOVERS------------

/* Set up the repositories for getting LensKit and other libraries.
 * These repositories are used for your Java or Groovy code, and for running LensKit.
 */
repositories {
    // allow maven local to be turned on
    if ((project.findProperty('maven.useLocal') ?: 'no') == 'yes') {
        mavenLocal()
    }
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
    mavenCentral()
}

dependencies {
    // Code needs to build with LensKit.
    compile "org.lenskit:lenskit-all:${project.findProperty('lenskit.version') ?: '3.0-M2'}"
    // To run the code, we also need the LensKit CLI.
    runtime "org.lenskit:lenskit-cli:${project.findProperty('lenskit.version') ?: '3.0-M2'}",
			"ch.qos.logback:logback-classic:1.1.2"
// OLD BUILD MAY CAUSE PROBLEMS ^^
  
  // Tests use JUnit
    testCompile "junit:junit:4.12"
}

// PREVIOUS BUILD LEFTOVERS-------------------
// You can set maximum Java heap size to 1g if your machine is slow
/* startScripts {
    defaultJvmOpts = ['-Xmx1g']
} */
// Assembles the distribution content and installs it on the current machine
build.dependsOn installDist
// END OF PREVIOUS BUILD LEFTOVERS------------

/* Configure LensKit */
lenskit {
    // you can configure the threadCount and maxMemory here, or on the command line
    // e.g. -PthreadCount=8
}

import org.lenskit.gradle.*

// skipped the download part of hitrec last.fm library
// assume we have the data in data/user_artists.csv
// yml is data/lastfm_rating.yml

task crossfold(type: Crossfold, group: 'evaluate') {
    // download data before evaluating
	
    // dependsOn fetchData - no longer needed

    input 'data/lastfm_rating.yml'
    // test on random 1/5 of each user's ratings
    holdoutFraction(0.2, 'random')
    // use 5-fold cross-validation
    partitionCount 5
}

/* Run the LensKit evaluation */
task evaluate(type: TrainTest, group: 'evaluate') {
    description 'Runs the LensKit evaluation.'
    logFile "$buildDir/evaluate.log"
    logFileLevel 'DEBUG'

    // we add our crossfold task as evaluation input
    dataSet crossfold

    // send the output to appropriate files
    outputFile "$buildDir/eval-results.csv"
    userOutputFile "$buildDir/eval-users.csv"

    // configure our algorithms
    algorithm 'PersMean', 'etc/pers-mean.groovy'
    algorithm 'ItemItem', 'etc/item-item.groovy'
    algorithm 'Custom', 'etc/custom.groovy'

    // and some evaluation tasks and metrics
    predict {
		// Write all predictions to a compressed CSV file
		outputFile "$buildDir/predictions.csv.gz"
        metric 'rmse'
        metric 'ndcg'
    }
    recommend {
		// Recommend 25 items per user
        listSize 10
		// Write all recommendations to a compressed CSV file
		outputFile "$buildDir/recommendations.csv.gz"
        metric 'mrr'
    }
}

task analyzeResults(type: Exec, group: 'evaluate') {
    description 'Post-processes evaluation results to draw charts.'

    dependsOn evaluate

    inputs.files "$buildDir/eval-results.csv", 'analyze-output.ipynb'
    outputs.file "$buildDir/analysis.html"

    /* run Jupyter/IPython. Location can be overridden with -Pipython.bin=/usr/bin/ipython */
    if (project.hasProperty('ipython.bin')) {
        executable project.getProperty('ipython.bin')
    } else {
        executable 'jupyter'
    }
    args 'nbconvert', '--to', 'html', '--execute'
    args '--output', file("$buildDir/analysis.html")
    args file("analyze-output.ipynb")
}

task cleanData {
    doLast {
        delete 'data'
    }
}
